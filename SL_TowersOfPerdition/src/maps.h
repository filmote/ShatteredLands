/*************************************************************************
 * Shattered Lands: Towers of Perdition                                  *
 * C opyright (C) 2019  Justin (tuxinator2009) Davis                     *
 *                                                                       *
 * This program is free software: you can redistribute it and/or modify  *
 * it under the terms of the GNU General Public License as published by  *
 * the Free Software Foundation, either version 3 of the License, or     *
 * (at your option) any later version.                                   *
 *                                                                       *
 * This program is distributed in the hope that it will be useful,       *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 * GNU General Public License for more details.                          *
 *                                                                       *
 * You should have received a copy of the GNU General Public License     *
 * along with this program.  If not, see <http://www.gnu.org/licenses/>. *
 *************************************************************************/

#ifndef MAPS_H
#define MAPS_H

#define MAP static const uint8_t PROGMEM
#define MAP_POINTER static const uint8_t* const PROGMEM
#define MAP_EVENTS static const uint8_t PROGMEM
#define MAP_EVENTS_POINTER static const uint8_t* const PROGMEM

#define EVENT_TELEPORT		0
#define EVENT_INN					1
#define EVENT_SHOP				2
#define EVENT_LARGECHEST	3
#define EVENT_MESSAGE			4
#define EVENT_BOSSBATTLE	5

static const uint16_t PROGMEM tilesetPassability[8] = {0x6E2F, 0x4100, 0x50C4, 0x7211};//0101000011000100

//uint8_t getMapNumChunks(const uint8_t *map)
//{
//	return (pgm_read_byte(map) & 0x3F) + 1;
//}

uint8_t getMapTileset(const uint8_t *map)
{
	return pgm_read_byte(map) & 3;
	//return (pgm_read_byte(map) >> 6) & 3;
}

uint8_t getMapSong(const uint8_t *map)
{
	return pgm_read_byte(map) >> 5;
}

/*uint8_t getMapMonsters(const uint8_t *map)
{
	return pgm_read_byte(map + 10);
}*/

uint8_t getChunkTileID(uint16_t tiles, int8_t metaID)
{
	uint8_t tileID = 0;
	while (metaID >= 0)
	{
		if (tiles == 0)
			return 0;
		if (tiles & 0x8000)
			--metaID;
		++tileID;
		tiles *= 2;
	}
	return tileID - 1;
}

uint8_t getChunkMetaTileID(const uint8_t *chunk, uint8_t x, uint8_t y, uint8_t bitsPerTile)
{
	uint8_t bitOffset = (y * 8 + x) * bitsPerTile;
	bitReaderInit(chunk + 5 + (bitOffset / 8), bitOffset % 8);
	//globalBitReader/.init(chunk + 5 + (bitOffset / 8), bitOffset % 8);
	return bitReaderRead8(bitsPerTile);//globalBitReader/.read8(bitsPerTile);
}

uint8_t getChunkBits(uint16_t tiles)
{
	uint8_t count = 0;
	while (tiles)
	{
		count += tiles & 1;
		tiles >>= 1;
	}
	if (count <= 1)
		return 0;
	else if (count <= 2)
		return 1;
	else if (count <= 4)
		return 2;
	else if (count <= 8)
		return 3;
	return 4;
}

int16_t getChunkBytes(uint16_t tiles)
{
	return 5 + getChunkBits(tiles) * 8;
}

const uint8_t *getChunk(const uint8_t *map, uint8_t chunkID)
{
	const uint8_t *chunk = map + 1;
	if (chunkID == 0x3F)
		return NULL;
	while (chunkID > 0)
	{
		chunk += getChunkBytes(READ_WORD(chunk));
		--chunkID;
	}
	return chunk;
}

uint8_t getNeighborChunk(const uint8_t *chunk, uint8_t dir)
{
	if (chunk == NULL)
		return 0x3F;
	else if (dir == DIR_UP)
		return (uint8_t)((pgm_read_byte(chunk + 2) >> 2) & 0x3F);
	else if (dir == DIR_DOWN)
		return (uint8_t)((READ_WORD(chunk + 2) >> 4) & 0x3F);
	else if (dir == DIR_LEFT)
		return (uint8_t)((READ_WORD(chunk + 3) >> 6) & 0x3F);
	return pgm_read_byte(chunk + 4) & 0x3F;
}

bool canMove(const uint8_t *chunk, int8_t x, int8_t y, uint8_t direction)
{
	uint16_t tiles;
	uint8_t chunkID = player.chunkID;
	bool updateChunk = false;
	if (direction == DIR_UP)
		--y;
	else if (direction == DIR_DOWN)
		++y;
	else if (direction == DIR_LEFT)
		--x;
	else if (direction == DIR_RIGHT)
		++x;
	if (x == -1)
	{
		x = 7;
		updateChunk = true;
	}
	else if (x == 8)
	{
		x = 0;
		updateChunk = true;
	}
	if (y == -1)
	{
		y = 7;
		updateChunk = true;
	}
	else if (y == 8)
	{
		y = 0;
		updateChunk = true;
	}
	if (updateChunk)
	{
		chunkID = getNeighborChunk(chunk, direction);
		chunk = getChunk(pMap, chunkID);
	}
	if (chunk == NULL)
		return false;
	tiles = READ_WORD(chunk);
	return (((uint16_t)pgm_read_word(tilesetPassability + tilesetID) >> (15 - getChunkTileID(tiles, getChunkMetaTileID(chunk, x, y, getChunkBits(tiles)))))) & 1;
}

void drawChunk(const uint8_t *chunk, int16_t xOffset, int16_t yOffset)
{
	uint16_t tiles = READ_WORD(chunk);
	int8_t bitsPerTile = getChunkBits(tiles);
	int8_t tileID = getChunkTileID(tiles, 0);
	bitReaderInit(chunk + 5, 0);
	if (chunk == NULL)
		tileID = 0;
	for (uint8_t y = 0; y < 8; ++y)
	{
		for (uint8_t x = 0; x < 8; ++x)
		{
			if (chunk != NULL && bitsPerTile != 0)
				tileID = getChunkTileID(tiles, bitReaderRead8(bitsPerTile));
			arduboy.drawBitmap(x * 16 + xOffset, y * 16 + yOffset, tileBitmaps + (tilesetID * 16 + tileID) * 32, 16, 16);
		}
	}
}

void drawChests(uint8_t chunkID, int16_t xOffset, int16_t yOffset)
{
	uint16_t loc;
	uint8_t num = pgm_read_byte(pMapEvents);
	uint8_t chestID;
	uint8_t x, y;
	for (uint8_t i = 0; i < num; ++i)
	{
		loc = READ_WORD(pMapEvents + i * 4 + 1);
		chestID = pgm_read_byte(pMapEvents + i * 4 + 3);
		if (((loc >> 9) & 0x3F) == chunkID && (loc & 7) == EVENT_LARGECHEST)
		{
			x = ((loc >> 6) & 0x7);
			y = ((loc >> 3) & 0x7);
			arduboy.fillRect(x * 16 + xOffset, y * 16 + yOffset, 16, 16, BLACK);
			arduboy.drawBitmap(x * 16 + xOffset, y * 16 + yOffset, tileBitmaps + LARGE_CHEST_TILE + ((player.largeChests & ((uint32_t)1 << chestID)) ? 32:0), 16, 16);
		}
	}
}

void drawMap()
{
	int16_t startX = player.x * -16 + 56 + playerXOff;
	int16_t startY = player.y * -16 + 24 + playerYOff;
	int16_t xOff, yOff;
	uint8_t starti = 0;
	uint8_t stopi = 5;
	if (player.y >= 5)
	{
		starti = 3;
		stopi = 8;
	}
	for (uint8_t i = starti; i <= stopi; ++i)
	{
		xOff = startX + (i % 3) * 128 - 128;
		yOff = startY + (i / 3) * 128 - 128;
		drawChunk(getChunk(pMap, chunkIDs[i]), xOff, yOff);
		drawChests(chunkIDs[i], xOff, yOff);
	}
	arduboy.drawBitmap(56, 24, playerMapSpriteMask + player.dir * 32, 16, 16, BLACK);
	arduboy.drawBitmap(56, 24, playerMapSprite + player.dir * 32, 16, 16);
}

int8_t getTileID(const uint8_t *chunk, int8_t x, int8_t y)
{
	uint16_t tiles = READ_WORD(chunk);
	return getChunkTileID(tiles, getChunkMetaTileID(chunk, x, y, getChunkBits(tiles)));
}

//3 chests in each tower (5 * 3 = 15)
//1 chest in each casle (5)
//1 chest in each town (4)

MAP mapOverworld[] = //1062 bytes
{
	0x20,0xa1,0x11,0xfc,0x6f,0xff,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x30,0x00,0x00,
	0x40,0x00,0x00,0x92,0x00,0x04,0x92,0x40,0x04,0x92,0x40,0x04,0x92,0x40,0x50,0x00,
	0xfc,0x9f,0xc2,0xff,0xfd,0xe0,0xe0,0xc0,0xc3,0xcf,0xcf,0x50,0x00,0xfc,0xa0,0x43,
	0xff,0xff,0x07,0x03,0x00,0x80,0xff,0xff,0x54,0x00,0xfc,0xb0,0x84,0x55,0x55,0x55,
	0x55,0x55,0x55,0x50,0x85,0x00,0x01,0x00,0x01,0x55,0x01,0x55,0x01,0x10,0x00,0xfc,
	0xc0,0xc5,0x51,0x11,0xfc,0xd1,0x3f,0x24,0x92,0x49,0x24,0x92,0x49,0x24,0x94,0x49,
	0x24,0x96,0x49,0x24,0x98,0x49,0x24,0x90,0x49,0x24,0x00,0x49,0x20,0x00,0x49,0xa0,
	0x00,0x03,0xff,0xc7,0x3c,0x3f,0x1f,0x0f,0x0f,0x0f,0x06,0x00,0xa0,0x00,0xfc,0xe1,
	0x88,0x10,0xfc,0xff,0xff,0xff,0xff,0x6c,0x00,0xb0,0x00,0xfc,0xf1,0xc9,0x02,0xaa,
	0x0a,0xaa,0x55,0x56,0x55,0x6a,0x55,0x6a,0x55,0x5a,0x51,0x5a,0x01,0x5a,0x50,0x00,
	0x05,0x02,0x0a,0xcf,0xc3,0xc1,0x81,0x81,0x81,0x81,0xe0,0x50,0x00,0x09,0x12,0x4b,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x7f,0x50,0x00,0x0d,0x22,0x8c,0xf0,0xf0,0xf8,
	0xfc,0xfe,0xff,0xff,0xff,0x50,0x00,0x11,0x32,0xcd,0xff,0x7f,0x00,0x00,0x00,0xc0,
	0xfe,0xfe,0x50,0x00,0x15,0x43,0x3f,0x87,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0xf0,
	0xcc,0x1d,0x6f,0xcf,0x00,0x06,0xdb,0x00,0x07,0x2b,0x00,0x07,0xbb,0x00,0x06,0x4b,
	0x01,0x24,0x92,0x09,0x24,0x92,0x49,0x24,0x92,0x49,0x24,0x92,0xb0,0x00,0x23,0xb3,
	0x90,0x81,0x5a,0x81,0x5a,0x85,0x5a,0x95,0x5a,0x55,0x5a,0x55,0x5a,0x55,0x6a,0xaa,
	0xaa,0x50,0x00,0x25,0x73,0xd1,0x80,0x80,0xc0,0xf1,0xff,0xff,0xff,0xff,0x50,0x00,
	0x29,0x84,0x12,0x0f,0x00,0x00,0x00,0x1f,0xff,0xff,0xff,0x50,0x00,0x2d,0x94,0x53,
	0xff,0x3f,0x0f,0x07,0x83,0x81,0x81,0xf8,0x50,0x00,0x31,0xa4,0x94,0xfe,0xfe,0xfe,
	0xfe,0xfe,0xfe,0xfe,0xfe,0x50,0x00,0x35,0xb4,0xff,0x07,0x0f,0x1f,0x3f,0x3f,0x3f,
	0x3f,0x3f,0xb4,0x00,0xfd,0xcf,0xd6,0x0c,0x05,0x04,0x15,0x14,0x55,0x15,0x55,0x15,
	0x55,0x01,0x5a,0x01,0x5a,0x01,0x6a,0x30,0x00,0x39,0xd5,0x7b,0x0f,0x07,0x7f,0x7f,
	0xff,0xff,0xff,0xff,0x50,0x80,0x41,0xfe,0xd8,0x55,0x55,0x55,0x55,0x55,0x55,0x55,
	0x55,0x55,0x55,0x55,0x50,0x55,0x40,0x55,0x42,0x51,0x51,0x46,0x05,0xd9,0x24,0x92,
	0x49,0x24,0x92,0x49,0x25,0x12,0x49,0x26,0x12,0x49,0x26,0x92,0x49,0x00,0x00,0x00,
	0x00,0x00,0x00,0x60,0x00,0x00,0x50,0x00,0x4a,0x16,0x1a,0xf8,0xf8,0xf1,0xc1,0x81,
	0x03,0x03,0x07,0x50,0x80,0x4e,0x26,0x5b,0x55,0x54,0x55,0x54,0x55,0x54,0x55,0x40,
	0x55,0x00,0x54,0x00,0x54,0x00,0x54,0x02,0x50,0x40,0x52,0x36,0xbf,0x05,0x55,0x05,
	0x55,0x05,0x55,0x01,0x55,0x00,0x55,0x00,0x15,0x00,0x15,0x80,0x15,0xb0,0x00,0x56,
	0x4f,0xdd,0x01,0x5a,0x05,0x56,0x05,0x5a,0x05,0x5a,0x15,0x6a,0x15,0x5a,0x15,0x5a,
	0x15,0x5a,0x30,0x00,0x5a,0x57,0x1e,0xff,0xff,0xff,0xff,0xff,0xf0,0xc0,0xc0,0x30,
	0x00,0xee,0x67,0x5f,0xff,0xfe,0xf8,0xf0,0x80,0x00,0x1e,0x3f,0x70,0x08,0x5e,0x77,
	0xa0,0x55,0x43,0x55,0x40,0x55,0x40,0x55,0x68,0x55,0x68,0x55,0x68,0x6a,0xa8,0xaa,
	0xa8,0x50,0x04,0x62,0x87,0xe1,0x80,0x00,0x00,0x00,0x00,0x00,0x15,0x55,0x15,0x55,
	0x15,0x55,0x15,0x55,0x15,0x55,0x50,0x00,0x66,0x98,0x22,0x1f,0x3f,0xff,0xff,0xff,
	0xff,0xff,0xff,0x50,0x08,0x6a,0xa8,0x63,0x54,0x02,0x54,0x00,0x54,0x00,0x55,0x00,
	0x55,0x40,0x55,0x55,0x55,0x55,0x55,0x55,0x50,0x04,0x6e,0xb8,0xbf,0x80,0x15,0x00,
	0x15,0x00,0x15,0x00,0x55,0x01,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x30,0x00,0x73,
	0xff,0xe5,0xc0,0xc0,0xc1,0xff,0xff,0xff,0xff,0xff,0x30,0x00,0x76,0xc9,0x26,0x00,
	0x03,0xff,0xff,0xff,0xff,0xff,0xff,0x10,0x00,0x7a,0xd9,0x67,0xd0,0x00,0x7e,0xe9,
	0xa8,0xaa,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0xa8,0xaa,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,
	0xa9,0xe0,0x22,0x82,0xf9,0xe9,0x24,0x92,0x49,0x24,0x92,0x49,0x24,0x92,0x49,0x60,
	0x00,0x03,0x24,0x25,0x12,0x24,0x24,0x12,0x24,0x24,0x12,0x24,0x24,0x12,0x18,0x00,
	0x87,0x0a,0x2a,0xff,0xff,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x08,0x00,0x8b,0x1a,0x6b,
	0x18,0x00,0x8f,0x2a,0xbf,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x10,0x00,0x97,
	0x4f,0xed,0xf6,0x00,0x9b,0x5b,0x2e,0x75,0xb6,0xdb,0x65,0xb6,0xdb,0x64,0x00,0x00,
	0x64,0x04,0x90,0x64,0x24,0x92,0x64,0x25,0x12,0x64,0x24,0x92,0x64,0x04,0x90,0xd0,
	0x02,0x9f,0x6b,0x6f,0xaa,0xa1,0xaa,0xa1,0x2a,0xa1,0x00,0x21,0x15,0x21,0xd5,0x00,
	0x15,0x15,0x15,0xd5,0xe0,0x20,0xa3,0x7b,0xb0,0x52,0x8a,0x52,0x8a,0x50,0xc0,0x52,
	0xa8,0x52,0xa8,0xc0,0x0c,0x54,0x28,0x54,0x28,0x18,0x00,0xa7,0x8b,0xf1,0x0f,0x0f,
	0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x08,0x00,0xab,0x9c,0x32,0x18,0xcc,0xaf,0xac,0x7f,
	0x24,0x90,0x00,0x24,0x90,0x00,0x25,0x30,0x00,0x26,0x50,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc1,0x11,0xff,0xff,0xf4,0x00,0x20,0x00,
	0x00,0x30,0x00,0x00,0x40,0x00,0x00,0x92,0x00,0x04,0x92,0x49,0x04,0x92,0x49,0x00,
	0x92,0x49,0x00,0x00,0x00,0xd2,0xcc,0xb3,0xfc,0xf5,0x4d,0x24,0x92,0x24,0xa4,0x92,
	0x24,0xa4,0x92,0x24,0xa5,0x2a,0x24,0xa5,0xb8,0x24,0x92,0x48,0x24,0x92,0x48,0x00,
	0x00,0x00,0xd0,0x22,0xb7,0xfd,0x36,0x44,0x00,0x00,0x4c,0x00,0x00,0x24,0x92,0x49,
	0x24,0x92,0x49,0x00,0x00,0x18,0x24,0x90,0x49,0x24,0x98,0x49,0x00,0x00,0x00,0xc0,
	0x22,0xbb,0xfd,0x77,0x15,0x00,0x20,0x00,0x15,0x55,0x15,0x55,0x00,0x00,0x55,0xd5,
	0x55,0x15,0x00,0x00,0xf0,0x22,0xbf,0xfd,0xb8,0x02,0x00,0x90,0x00,0x90,0x90,0x20,
	0x9a,0x90,0x20,0x90,0x90,0x80,0x90,0x90,0x20,0x90,0x00,0x20,0x90,0xdb,0x00,0x00,
	0xdb,0x1c,0x00,0xc3,0xfd,0xf9,0x00,0x55,0x00,0x55,0x00,0x55,0x00,0x59,0x00,0x55,
	0x00,0x55,0x00,0x00,0x00,0x00,0x18,0x00,0xc7,0xfe,0x3a,0xff,0xff,0xff,0xff,0xff,
	0xff,0x00,0x00,0x19,0x11,0xcb,0xfe,0x7f,0x00,0x20,0x00,0x00,0x30,0x00,0x24,0xc0,
	0x00,0x24,0x90,0x00,0x24,0x90,0x00,0x24,0x90,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x10,0x00,0x3d,0xe5,0x97
};

MAP mapMainCastle[] = //176 bytes
{//01000001
	0x41,0xd1,0x84,0xfc,0x3f,0xc1,0x00,0x00,0x04,0x00,0x00,0x04,0x00,0x00,0x04,0x92,
	0x49,0x24,0x95,0x24,0xac,0x85,0xb6,0xcc,0x85,0x24,0x8c,0x85,0xb6,0xcc,0x60,0x84,
	0xfc,0x40,0x02,0xaa,0xaa,0xff,0xfe,0x01,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,
	0x02,0x00,0x02,0xd7,0x94,0xfc,0x50,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x66,0x66,0x66,0x66,0x88,0x86,0x28,0x86,0x11,0x16,0x53,0x46,
	0x10,0x16,0x11,0x76,0x11,0x16,0x11,0x16,0x48,0xcd,0x03,0xff,0xc4,0x40,0x24,0x92,
	0x40,0x47,0x6a,0x40,0x01,0xb2,0x40,0x01,0xb2,0x5b,0x00,0x01,0x5b,0x00,0x00,0x49,
	0x24,0x92,0x96,0xdb,0x6d,0x48,0x8e,0x07,0xf0,0xc5,0x49,0x04,0x92,0x92,0x87,0x22,
	0x00,0x00,0x02,0x00,0x00,0x02,0x00,0x00,0x01,0x00,0x00,0x00,0x49,0x00,0x92,0x92,
	0x80,0xe4,0x40,0xbe,0x0b,0xf1,0x3f,0x20,0x92,0x41,0xc2,0x55,0x81,0x01,0x86,0x01,
	0x00,0x00,0x01,0x01,0x86,0x01,0x00,0x00,0x01,0x24,0x92,0x49,0xb6,0xdb,0x6e
};

MAP mapTown[] = //68 bytes (265 bytes for all 4 towns)
{
	0x61,0xd1,0x8e,0xff,0xff,0xc1,0x02,0x49,0x24,0x02,0x24,0x92,0x02,0x36,0xdb,0x02,
	0x12,0x49,0x02,0x49,0x09,0x02,0xed,0xc9,0x00,0x92,0x49,0x02,0x49,0x24,0xd7,0xfe,
	0xff,0xf0,0x3f,0x66,0x66,0x66,0x66,0x22,0x26,0x2b,0xb6,0x55,0x56,0x53,0x46,0x11,
	0x16,0x11,0x96,0x66,0x66,0x61,0x66,0xa7,0xb8,0xc1,0xa6,0x11,0x11,0x11,0x06,0x66,
	0x66,0x66,0x66
};

MAP mapCastle[] = //39 bytes (108 bytes for all 4 castles)
{
	0x41,0xf1,0x9f,0xff,0xff,0xff,0x55,0x55,0x55,0x55,0x53,0x88,0x88,0x35,0x54,0x62,
	0x06,0x45,0x51,0x11,0x11,0x15,0x5a,0xa1,0x1a,0xa5,0x5a,0xa1,0x1a,0xa5,0x55,0x51,
	0x15,0x55,0x78,0x81,0x18,0x89
};

MAP mapTower[] = //406 bytes (776 bytes for all 5 towers)
{
	0x83,0xe5,0x24,0xfc,0x2f,0xc1,0x00,0x0c,0xeb,0x03,0x58,0x49,0x1a,0x12,0x49,0xd0,
	0x92,0x49,0xc4,0x92,0x49,0x84,0x92,0x49,0x24,0x92,0x49,0x44,0x92,0x49,0xec,0x28,
	0xfc,0x30,0x3f,0x96,0x60,0x00,0x04,0xbb,0x80,0x24,0x92,0xf0,0x24,0x92,0x5e,0x24,
	0x92,0x4e,0x24,0x92,0x4b,0x24,0x92,0x4a,0x24,0x92,0x49,0xe4,0x66,0x03,0xff,0xc3,
	0xff,0xff,0xff,0x75,0xd7,0x5b,0x24,0x92,0x49,0x84,0xa2,0x49,0xc4,0x92,0x49,0x10,
	0x92,0x49,0x02,0x12,0x49,0x00,0x7f,0xe1,0xe4,0xae,0x07,0xf0,0xbf,0x88,0x88,0x88,
	0x88,0x67,0x35,0x35,0x35,0x67,0x11,0x10,0x11,0x67,0x12,0x11,0x14,0x67,0x11,0x11,
	0x16,0x67,0x11,0x11,0x40,0x67,0x11,0x14,0x00,0x60,0x88,0x80,0x00,0xf5,0x6e,0xfc,
	0x6f,0xc5,0x00,0x00,0x94,0x78,0x00,0x97,0x51,0x18,0x09,0x51,0x11,0x18,0x95,0x11,
	0x11,0x18,0x91,0x12,0x11,0x18,0x0a,0xa6,0x11,0x18,0x47,0x89,0x11,0x18,0x31,0x89,
	0x11,0x18,0xfc,0xee,0xfc,0x71,0x3f,0xa8,0x59,0x00,0x00,0xa1,0x14,0x89,0x00,0xa1,
	0x11,0x14,0x90,0xa1,0x12,0x11,0x49,0xa1,0x11,0x11,0x19,0xa1,0x11,0x11,0x14,0xa1,
	0x11,0x11,0x13,0x0b,0xb7,0x16,0xbb,0xf5,0xee,0x13,0xff,0xc7,0x12,0x9a,0x11,0x19,
	0xbb,0x0a,0x11,0x19,0xa4,0x85,0x11,0x19,0xa1,0x13,0x11,0x19,0xa1,0x11,0x6b,0xb0,
	0x07,0x11,0x9a,0x48,0x00,0x71,0x9a,0x11,0x00,0x0b,0x0a,0x21,0xd7,0xae,0x17,0xf1,
	0xbf,0x00,0x00,0xa0,0x00,0x93,0x73,0x43,0x73,0x91,0x11,0x11,0x11,0x91,0x12,0x11,
	0x16,0x91,0x11,0x11,0x18,0x51,0x11,0x11,0x60,0x11,0x11,0x16,0x00,0x11,0x16,0xa0,
	0x00,0xdd,0x3d,0xfc,0xaf,0xc9,0x00,0x00,0x06,0x46,0x00,0x00,0x07,0x77,0x09,0x64,
	0x87,0xa7,0x95,0x11,0x87,0x77,0x91,0x12,0x80,0x70,0x51,0x11,0x38,0x79,0x11,0x11,
	0x18,0x79,0x11,0x11,0x18,0x79,0xdd,0x2c,0xfc,0xb2,0x3f,0x84,0x67,0x00,0x00,0x81,
	0x13,0x67,0x00,0x81,0x11,0x13,0x70,0x81,0x12,0x11,0x37,0x81,0x11,0x11,0x17,0x51,
	0x11,0x11,0x13,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0xd0,0x5e,0x23,0xff,0xcb,
	0x28,0x93,0x66,0x24,0x93,0x66,0x24,0x93,0x66,0x64,0x93,0x66,0xc4,0x93,0x66,0x0c,
	0x93,0x66,0x01,0x93,0x66,0x00,0x7e,0x10,0xc0,0x8a,0x27,0xf2,0xbf,0x24,0x92,0x49,
	0x24,0x92,0x49,0x24,0x92,0x49,0x24,0x92,0x4a,0x24,0x82,0x4b,0x24,0x92,0x50,0x24,
	0x92,0x80,0x92,0x48,0x00
};

MAP mapCave[] = //126 bytes (+33 bytes for events)
{
	0xa2,0xe4,0xb4,0xff,0xff,0xff,0x75,0xd7,0x5d,0x24,0x92,0x49,0x27,0x00,0x49,0x24,
	0x00,0x11,0x20,0x00,0x01,0x20,0x00,0x01,0x20,0x00,0x01,0x80,0x00,0x07,0xe4,0x64,
	0xfc,0x2f,0xff,0x75,0xd7,0x5c,0x24,0x92,0x49,0x29,0x00,0x00,0x28,0x00,0x00,0x20,
	0x00,0x00,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xde,0x48,0x07,0xff,0xff,
	0xc0,0x00,0x02,0x20,0x00,0x01,0x2e,0x49,0x29,0x3f,0xff,0xf9,0x3f,0xff,0xf9,0x3f,
	0xff,0xf9,0x3f,0xff,0xf9,0x24,0x92,0x49,0xed,0xb4,0xff,0xff,0xff,0x74,0x74,0x74,
	0x07,0x11,0x11,0x11,0x06,0x10,0x00,0x01,0x01,0x13,0x74,0x01,0x01,0x11,0x11,0x01,
	0x01,0x82,0x81,0x01,0x01,0x11,0x11,0x01,0x51,0x90,0x00,0x01,0x11
};

static const uint8_t PROGMEM mapKeys[] = //1 byte for each map with the upper 4 bits set to the key needed (0 means no key needed, 16 means all 4 seals needed)
{
	0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x12,0x00,0x00,0x00,0x43,0x00,0x00,0x87,0x0F
};

//GOBLIN FIREWOLF SCORPION MEGABAT SKELETON SLIME WIZARD GOLEM
static const uint8_t PROGMEM mapMonsters[] = //1 byte for each map with 1 bit per monster
{
	0x00,//Overworld
	0x00,//Castle0
	0x00,//North-east town (Town1)
	0x00,//North-east castle (Castle1)
	0x88,//North-east tower (Tower1) 10001000 (Goblin, Skeleton)
	0x00,//North-west town (Town2)
	0x00,//North-west castle (Castle2)
	0x44,//North-west tower (Tower2) 01000100 (Firewolf, Slime)
	0x00,//South-west town (Town3)
	0x10,//South-west cave (Cave) 00010000 (Megabat)
	0x00,//South-west castle (Castle3)
	0x02,//South-west tower (Tower3) 00000010 (Wizard)
	0x00,//South-east town (Town4)
	0x00,//South-east castle (Castle4)
	0x01,//South-east tower (Tower4) 00000001 (Golem)
	0x03 //Final Tower (Tower5) 00000011 (Wizard, Golem)
};

MAP_POINTER maps[] =
{
	mapOverworld,//0000
	mapMainCastle,//0001 (Castle0)
	mapTown, //0010: North-east town (Town1)
	mapCastle, //0011: North-east castle (Castle1)
	mapTower,//0100: North-east tower (Tower1)
	mapTown,//0101: North-west town (Town2)
	mapCastle,//0110: North-west castle (Castle2)
	mapTower,//0111: North-west tower (Tower2)
	mapTown,//1000: South-west town (Town3)
	mapCave,//1001: South-west cave (Cave)
	mapCastle,//1010: South-west castle (Castle3)
	mapTower,//1011: South-west tower (Tower3)
	mapTown,//1100: South-east town (Town4)
	mapCastle,//1101: South-east castle (Castle4)
	mapTower,//1110: South-east tower (Tower4)
	mapTower//1111: Final Tower (Tower5)
};

/*
EVENTS:
2 bytes
	- 1 bit button activated
	- 6 bits chunkID
	- 3 bits x-coordinate
	- 3 bits y-coordinate
	- 3 bits event type
2 bytes - event parameters

Event Types:

000 Teleport:
	- 4 bits mapID
	- 6 bits chunkID
	- 3 bits x-coordinate
	- 3 bits y-coordinate

001 Inn:
	- 1 byte price (4.4 format, cost = (hp * (price) + 1) >> 4)
	- 1 byte unused

010 Shop:
	- 1 byte itemID
	- 1 byte unused

011 Large Chest:
	- 1 bytes
		- 3 bits unused
		- 5 bits chestID
	- 1 bit item=0x8? spell=x0x0?
		Item
		- 4 bits unused
		- 3 bits item type
		Spell
		- 3 bit unused
		- 4 bits id

100 Message:
	- 1 byte messageID
	- 1 byte add key

101 Boss Battle:
	- 1 byte bossID
	- 1 byte seal
*/

MAP_EVENTS mapOverworldEvents[] = //89 bytes
{
	21,
	//Teleport to Main Castle (Left)
	//0 011111 111 000 000
	//0001 000100 011 111
	0x3F,0xC0,0x11,0x1F,
	//Teleport to Main Castle (Right)
	//0 100000 000 000 000
	//0001 000100 100 111
	0x40,0x00,0x11,0x27,
	//Teleport to Town 1
	//0 000011 100 011 000
	//0010 000000 010 110
	0x07,0x18,0x20,0x16,
	//Teleport to Castle 1 (Left)
	//0 100010 111 000 000
	//0011 000000 011 111
	0x45,0xC0,0x30,0x1F,
	//Teleport to Castle 1 (Right)
	//0 100011 000 000 000
	//0011 000000 100 111
	0x46,0x00,0x30,0x27,
	//Teleport to Tower 1
	//0 000101 100 100 000
	//0100 000010 111 111
	0x0B,0x20,0x40,0xBF,
	//Teleport to Town 2
	//0 010101 010 000 000
	//0101 000000 010 110
	0x2A,0x80,0x50,0x16,
	//Teleport to Castle 2 (Left)
	//0 001110 101 010 000
	//0110 000000 011 111
	0x1D,0x50,0x60,0x1F,
	//Teleport to Castle 2 (Right)
	//0 001110 110 010 000
	//0110 000000 100 111
	0x1D,0x90,0x60,0x27,
	//Teleport to Tower 2
	//0 000000 011 011 000
	//0111 000010 111 111
	0x00,0xD8,0x70,0xBF,
	//Teleport to Town 3
	//0 101101 101 101 000
	//1000 000000 010 110
	0x5B,0x68,0x80,0x16,
	//Teleport to Cave (Entrance)
	//0 101101 001 000 000
	//1001 000000 111 111
	0x5A,0x40,0x90,0x3F,
	//Teleport to Cave (Exit)
	//0 110100 001 000 000
	//1001 000011 000 111
	0x68,0x40,0x90,0xC7,
	//Teleport to Castle 3 (Left)
	//0 110100 101 100 000
	//1010 000000 011 111
	0x69,0x60,0xA0,0x1F,
	//Teleport to Castle 3 (Right)
	//0 110100 110 100 000
	//1010 000000 100 111
	0x69,0xA0,0xA0,0x27,
	//Teleport to Tower 3
	//0 110011 011 010 000
	//1011 000010 111 111
	0x66,0xD0,0xB0,0xBF,
	//Teleport to Town 4
	//0 111000 110 011 000
	//1100 000000 010 110
	0x71,0x98,0xC0,0x16,
	//Teleport to Castle 4 (Left)
	//0 110010 010 011 000
	//1101 000000 011 111
	0x64,0x98,0xD0,0x1F,
	//Teleport to Castle 4 (Right)
	//0 110010 011 011 000
	//1101 000000 100 111
	0x64,0xD8,0xD0,0x27,
	//Teleport to Tower 4
	//0 111010 011 010 000
	//1110 000010 111 111
	0x74,0xD0,0xE0,0xBF,
	//Teleport to Tower 5
	//0 011000 010 100 000
	//1111 000010 111 111
	0x30,0xA0,0xF0,0xBF
};

MAP_EVENTS mapMainCastleEvents[] =
{
	14,
	//Teleport to Overworld (Left)
	//0 000100 011 111 000
	//0000 011111 111 000
	0x08,0xF8,0x07,0xF8,
	//Teleport to Overworld (Right)
	//0 000100 100 111 000
	//0000 100000 000 000
	0x09,0x38,0x08,0x00,
	//Inn
	//1 000010 101 101 001
	0x85,0x69,0x00,0x00,
	//Shop Potion
	//1 000000 010 110 010
	0x80,0xB2,0x00,0x00,
	//Shop S-Potion
	//1 000000 011 110 010
	0x80,0xF2,0x01,0x00,
	//Shop X-Potion
	//1 000000 100 110 010
	0x81,0x32,0x02,0x00,
	//Shop Ether
	//1 000000 101 110 010
	0x81,0x72,0x03,0x00,
	//Shop S-Ether
	//1 000000 010 100 010
	0x80,0xA2,0x04,0x00,
	//Shop X-Ether
	//1 000000 011 100 010
	0x80,0xE2,0x05,0x00,
	//Shop Elixir
	//1 000000 100 100 010
	0x81,0x22,0x06,0x00,
	//Shop X-Elixir
	//1 000000 101 100 010
	0x81,0x62,0x07,0x00,
	//Large Chest #0 (CURE)
	//1 000010 001 110 011
	0x84,0x73,0x00,0x00,
	//King
	//1 000001 011 010 100
	0x82,0xD4,0x00,0x00,
	//Inn Bookshelf #1
	//1 000010 100 100 100
	0x85,0x24,0x05,0x00
};

MAP_EVENTS mapTown1Events[]
{
	13,
	//Teleport to Overworld
	//0 000000 010 110 000
	//0000 000011 100 011
	0x00,0xB0,0x00,0xE3,
	//Inn
	//1 000001 101 010 001
	0x83,0x51,0x00,0x00,
	//Shop Potion
	//1 000000 011 001 010
	0x80,0xCA,0x00,0x00,
	//Shop S-Potion
	//1 000000 100 001 010
	0x81,0x0A,0x01,0x00,
	//Shop X-Potion
	//1 000000 101 001 010
	0x81,0x4A,0x02,0x00,
	//Shop Ether
	//1 000000 110 001 010
	0x81,0x8A,0x03,0x00,
	//Shop S-Ether
	//1 000000 111 001 010
	0x81,0xCA,0x04,0x00,
	//Shop X-Ether
	//1 000001 000 001 010
	0x82,0x0A,0x05,0x00,
	//Shop Elixir
	//1 000001 001 001 010
	0x82,0x4A,0x06,0x00,
	//Shop X-Elixir
	//1 000001 010 001 010
	0x82,0x8A,0x07,0x00,
	//Large Chest #1 (SWORD)
	//1 000001 110 110 011
	0x83,0xB3,0x01,0x80,
	//Inn Bookshelf #2
	//1 000001 100 001 100
	0x83,0x0C,0x06,0x00
};

MAP_EVENTS mapCastle1Events[] =
{
	4,
	//Teleport to Overworld (Left)
	//0 000000 011 111 000
	//0000 100010 111 000
	0x00,0xF8,0x08,0xB8,
	//Teleport to Overworld (Right)
	//0 000000 100 111 000
	//0000 100011 000 000
	0x01,0x38,0x08,0xC0,
	//King
	//1 000000 011 010 100
	0x80,0xD4,0x01,0x20,
	//Large Chest #2 (ARMOR)
	//1 000000 100 010 011
	0x81,0x13,0x02,0x81
};

MAP_EVENTS mapTower1Events[] =
{
	23,
	//Teleport to Overworld
	//0 000010 111 111 000
	//0000 000101 100 100
	0x05,0xF8,0x01,0x64,
	//Stairs 1 (Up)
	//0 000010 011 011 000
	//0100 000110 011 011
	0x04,0xD8,0x41,0x9B,
	//Stairs 1 (Down)
	//0 000110 011 011 000
	//0100 000010 011 011
	0x0C,0xD8,0x40,0x9B,
	//Stairs 2 (Up)
	//0 000100 011 100 000
	//0100 001000 011 100
	0x08,0xE0,0x42,0x1C,
	//Stairs 2 (Down)
	//0 001000 011 100 000
	//0100 000100 011 100
	0x10,0xE0,0x41,0x1C,
	//Stairs 3 (Down)
	//0 001010 001 000 000
	//0100 000110 001 000
	0x14,0x40,0x41,0x88,
	//Stairs 3 (Up)
	//0 000110 001 000 000
	//0100 001010 001 000
	0x0C,0x40,0x42,0x88,
	//Stairs 4 (Down)
	//0 000100 000 111 000
	//0100 000000 000 111
	0x08,0x38,0x40,0x07,
	//Stairs 4 (Up)
	//0 000000 000 111 000
	//0100 000100 000 111
	0x00,0x38,0x41,0x07,
	//Stairs 5 (Up)
	//0 000001 111 110 000
	//0100 000101 111 110
	0x03,0xF0,0x41,0x7E,
	//Stairs 5 (Down)
	//0 000101 111 110 000
	//0100 000001 111 110
	0x0B,0xF0,0x40,0x7E,
	//Stairs 6 (Up)
	//0 000101 011 011 000
	//0100 001001 011 011
	0x0A,0xD8,0x42,0x5B,
	//Stairs 6 (Down)
	//0 001001 011 011 000
	//0100 000101 011 011
	0x12,0xD8,0x41,0x5B,
	//Passage (Down)
	//0 000101 100 111 000
	//0100 000111 100 001
	0x0B,0x38,0x41,0xE1,
	//Passage (Up)
	//0 000111 100 001 000
	//0100 000101 100 111
	0x0F,0x08,0x41,0x67,
	//Stairs 7 (Down)
	//0 000111 011 011 000
	//0100 000011 011 011
	0x0E,0xD8,0x40,0xDB,
	//Stairs 7 (Up)
	//0 000011 011 011 000
	//0100 000111 011 011
	0x06,0xD8,0x41,0xDB,
	//Stairs 8 (Up)
	//0 000110 110 111 000
	//0100 001010 110 111
	0x0D,0xB8,0x42,0xB7,
	//Stairs 8 (Down)
	//0 001010 110 111 000
	//0100 000110 110 111
	0x15,0xB8,0x41,0xB7,
	//Large Chest #3 (BOOTS)
	//1 000001 000 001 011
	0x82,0x0B,0x03,0x82,
	//Large Chest #4 (CHARM)
	//1 001011 011 100 011
	0x96,0xE3,0x04,0x83,
	//Large Chest #5 (FIRE)
	//1 000011 101 010 011
	0x87,0x53,0x05,0x02,
	//Boss #1 (ID=0 Seal=2)
	//0 001000 110 010 101
	0x11,0x95,0x00,0x02
};

MAP_EVENTS mapTown2Events[] =
{
	13,
	//Teleport to Overworld
	//0 000000 010 110 000
	//0000 010101 010 000
	0x00,0xB0,0x05,0x50,
	//Inn
	//1 000001 101 011 001
	0x83,0x51,0x00,0x00,
	//Shop Potion
	//1 000000 011 001 010
	0x80,0xCA,0x00,0x00,
	//Shop S-Potion
	//1 000000 100 001 010
	0x81,0x0A,0x01,0x00,
	//Shop X-Potion
	//1 000000 101 001 010
	0x81,0x4A,0x02,0x00,
	//Shop Ether
	//1 000000 110 001 010
	0x81,0x8A,0x03,0x00,
	//Shop S-Ether
	//1 000000 111 001 010
	0x81,0xCA,0x04,0x00,
	//Shop X-Ether
	//1 000001 000 001 010
	0x82,0x0A,0x05,0x00,
	//Shop Elixir
	//1 000001 001 001 010
	0x82,0x4A,0x06,0x00,
	//Shop X-Elixir
	//1 000001 010 001 010
	0x82,0x8A,0x07,0x00,
	//Large Chest #6 (SWORD)
	//1 000001 110 110 011
	0x83,0xB3,0x06,0x80,
	//Inn Bookshelf #3
	//1 000001 100 001 100
	0x83,0x0C,0x07,0x00
};

MAP_EVENTS mapCastle2Events[] =
{
	4,
	//Teleport to Overworld (Left)
	//0 000000 011 111 000
	//0000 001110 101 010
	0x00,0xF8,0x03,0xAA,
	//Teleport to Overworld (Right)
	//0 000000 100 111 000
	//0000 001110 110 010
	0x01,0x38,0x03,0xB2,
	//King
	//1 000000 011 010 100
	0x80,0xD4,0x02,0x10,
	//Large Chest #7 (ARMOR)
	//1 000000 100 010 011
	0x81,0x13,0x07,0x81
};

MAP_EVENTS mapTower2Events[] =
{
	23,
	//Teleport to Overworld
	//0 000010 111 111 000
	//0000 000000 011 011
	0x05,0xF8,0x00,0x1B,
	//Stairs 1 (Up)
	//0 000010 011 011 000
	//0111 000110 011 011
	0x04,0xD8,0x71,0x9B,
	//Stairs 1 (Down)
	//0 000110 011 011 000
	//0111 000010 011 011
	0x0C,0xD8,0x70,0x9B,
	//Stairs 2 (Up)
	//0 000100 011 100 000
	//0111 001000 011 100
	0x08,0xE0,0x72,0x1C,
	//Stairs 2 (Down)
	//0 001000 011 100 000
	//0111 000100 011 100
	0x10,0xE0,0x71,0x1C,
	//Stairs 3 (Down)
	//0 001010 001 000 000
	//0111 000110 001 000
	0x14,0x40,0x71,0x88,
	//Stairs 3 (Up)
	//0 000110 001 000 000
	//0111 001010 001 000
	0x0C,0x40,0x72,0x88,
	//Stairs 4 (Down)
	//0 000100 000 111 000
	//0111 000000 000 111
	0x08,0x38,0x70,0x07,
	//Stairs 4 (Up)
	//0 000000 000 111 000
	//0111 000100 000 111
	0x00,0x38,0x71,0x07,
	//Stairs 5 (Up)
	//0 000001 111 110 000
	//0111 000101 111 110
	0x03,0xF0,0x71,0x7E,
	//Stairs 5 (Down)
	//0 000101 111 110 000
	//0111 000001 111 110
	0x0B,0xF0,0x70,0x7E,
	//Stairs 6 (Up)
	//0 000101 011 011 000
	//0111 001001 011 011
	0x0A,0xD8,0x72,0x5B,
	//Stairs 6 (Down)
	//0 001001 011 011 000
	//0111 000101 011 011
	0x12,0xD8,0x71,0x5B,
	//Passage (Down)
	//0 000101 100 111 000
	//0111 000111 100 001
	0x0B,0x38,0x71,0xE1,
	//Passage (Up)
	//0 000111 100 001 000
	//0111 000101 100 111
	0x0F,0x08,0x71,0x67,
	//Stairs 7 (Down)
	//0 000111 011 011 000
	//0111 000011 011 011
	0x0E,0xD8,0x70,0xDB,
	//Stairs 7 (Up)
	//0 000011 011 011 000
	//0111 000111 011 011
	0x06,0xD8,0x71,0xDB,
	//Stairs 8 (Up)
	//0 000110 110 111 000
	//0111 001010 110 111
	0x0D,0xB8,0x72,0xB7,
	//Stairs 8 (Down)
	//0 001010 110 111 000
	//0111 000110 110 111
	0x15,0xB8,0x71,0xB7,
	//Large Chest #8 (BOOTS)
	//1 000001 000 001 011
	0x82,0x0B,0x08,0x82,
	//Large Chest #9 (AQUA)
	//1 001011 011 100 011
	0x96,0xE3,0x09,0x03,
	//Large Chest #10 (IMMUNE FIRE)
	//1 000011 101 010 011
	//101011000 010
	0x87,0x53,0x0A,0xC2,
	//Boss #2 (ID=1 Seal=1)
	//0 001000 110 010 101
	0x11,0x95,0x01,0x01
};

MAP_EVENTS mapTown3Events[] =
{
	13,
	//Teleport to Overworld
	//0 000000 010 110 000
	//0000 101101 101 101
	0x00,0xB0,0x0B,0x6D,
	//Inn
	//1 000001 101 011 001
	0x83,0x51,0x00,0x00,
	//Shop Potion
	//1 000000 011 001 010
	0x80,0xCA,0x00,0x00,
	//Shop S-Potion
	//1 000000 100 001 010
	0x81,0x0A,0x01,0x00,
	//Shop X-Potion
	//1 000000 101 001 010
	0x81,0x4A,0x02,0x00,
	//Shop Ether
	//1 000000 110 001 010
	0x81,0x8A,0x03,0x00,
	//Shop S-Ether
	//1 000000 111 001 010
	0x81,0xCA,0x04,0x00,
	//Shop X-Ether
	//1 000001 000 001 010
	0x82,0x0A,0x05,0x00,
	//Shop Elixir
	//1 000001 001 001 010
	0x82,0x4A,0x06,0x00,
	//Shop X-Elixir
	//1 000001 010 001 010
	0x82,0x8A,0x07,0x00,
	//Large Chest #11 (CURE)
	//1 000001 110 110 011
	0x83,0xB3,0x0B,0x00,
	//Inn Bookshelf #4
	//1 000001 100 001 100
	0x83,0x0C,0x08,0x00
};

MAP_EVENTS mapCaveEvents[] =
{
	8,
	//Teleport to Overworld (Entrance)
	//000000 111 111 000
	//0000 101101 001 000
	0x01,0xF8,0x0B,0x48,
	//Teleport Entrance to Lower Level
	//000000 000 111 000
	//1001 000001 111 000
	0x00,0x38,0x90,0x78,
	//Teleport Lower Level to Entrance
	//000001 111 000 000
	//1001 000000 000 111
	0x03,0xC0,0x90,0x07,
	//Teleport Lower Level 1 to Lower Level 2
	//000001 000 101 000
	//1001 000010 111 000
	0x02,0x28,0x90,0xB8,
	//Teleport Lower Level 2 to Lower Level 1
	//000010 111 000 000
	//1001 000001 000 101
	0x05,0xC0,0x90,0x45,
	//Teleport Lower Level to Exit
	//000010 000 000 000
	//1001 000011 111 001
	0x04,0x00,0x90,0xF9,
	//Teleport Exit to Lower Level
	//000011 111 001 000
	//1001 000010 000 000
	0x07,0xC8,0x90,0x80,
	//Teleport to Overworld (Exit)
	//000011 000 111 000
	//0000 110100 001 000
	0x06,0x38,0x0D,0x08
};

MAP_EVENTS mapCastle3Events[] =
{
	4,
	//Teleport to Overworld (Left)
	//0 000000 011 111 000
	//0000 110100 101 100
	0x00,0xF8,0x0D,0x2C,
	//Teleport to Overworld (Right)
	//0 000000 100 111 000
	//0000 110100 110 100
	0x01,0x38,0x0D,0x34,
	//King
	//1 000000 011 010 100
	0x80,0xD4,0x03,0x40,
	//Large Chest #12 (CHARM)
	//1 000000 100 010 011
	0x81,0x13,0x0C,0x83
};

MAP_EVENTS mapTower3Events[] =
{
	23,
	//Teleport to Overworld
	//0 000010 111 111 000
	//0000 110011 011 010
	0x05,0xF8,0x0C,0xDA,
	//Stairs 1 (Up)
	//0 000010 011 011 000
	//1011 000110 011 011
	0x04,0xD8,0xB1,0x9B,
	//Stairs 1 (Down)
	//0 000110 011 011 000
	//1011 000010 011 011
	0x0C,0xD8,0xB0,0x9B,
	//Stairs 2 (Up)
	//0 000100 011 100 000
	//1011 001000 011 100
	0x08,0xE0,0xB2,0x1C,
	//Stairs 2 (Down)
	//0 001000 011 100 000
	//1011 000100 011 100
	0x10,0xE0,0xB1,0x1C,
	//Stairs 3 (Down)
	//0 001010 001 000 000
	//1011 000110 001 000
	0x14,0x40,0xB1,0x88,
	//Stairs 3 (Up)
	//0 000110 001 000 000
	//1011 001010 001 000
	0x0C,0x40,0xB2,0x88,
	//Stairs 4 (Down)
	//0 000100 000 111 000
	//1011 000000 000 111
	0x08,0x38,0xB0,0x07,
	//Stairs 4 (Up)
	//0 000000 000 111 000
	//1011 000100 000 111
	0x00,0x38,0xB1,0x07,
	//Stairs 5 (Up)
	//0 000001 111 110 000
	//1011 000101 111 110
	0x03,0xF0,0xB1,0x7E,
	//Stairs 5 (Down)
	//0 000101 111 110 000
	//1011 000001 111 110
	0x0B,0xF0,0xB0,0x7E,
	//Stairs 6 (Up)
	//0 000101 011 011 000
	//1011 001001 011 011
	0x0A,0xD8,0xB2,0x5B,
	//Stairs 6 (Down)
	//0 001001 011 011 000
	//1011 000101 011 011
	0x12,0xD8,0xB1,0x5B,
	//Passage (Down)
	//0 000101 100 111 000
	//1011 000111 100 001
	0x0B,0x38,0xB1,0xE1,
	//Passage (Up)
	//0 000111 100 001 000
	//1011 000101 100 111
	0x0F,0x08,0xB1,0x67,
	//Stairs 7 (Down)
	//0 000111 011 011 000
	//1011 000011 011 011
	0x0E,0xD8,0xB0,0xDB,
	//Stairs 7 (Up)
	//0 000011 011 011 000
	//1011 000111 011 011
	0x06,0xD8,0xB1,0xDB,
	//Stairs 8 (Up)
	//0 000110 110 111 000
	//1011 001010 110 111
	0x0D,0xB8,0xB2,0xB7,
	//Stairs 8 (Down)
	//0 001010 110 111 000
	//1011 000110 110 111 000
	0x15,0xB8,0xB1,0xB7,
	//Large Chest #13 (ROCK)
	//1 000001 000 001 011
	0x82,0x0B,0x0D,0x04,
	//Large Chest #14 (SWORD)
	//1 001011 011 100 011
	0x96,0xE3,0x0E,0x80,
	//Large Chest #15 (IMMUNE AQUA)
	//1 000011 101 010 011
	0x87,0x53,0x0F,0xC3,
	//Boss #3 (ID=2 Seal=4)
	//0 001000 110 010 101
	0x11,0x95,0x02,0x04
};

MAP_EVENTS mapTown4Events[] =
{
	13,
	//Teleport to Overworld
	//0 000000 010 110 000
	//0000 111000 110 011
	0x00,0xB0,0x0E,0x33,
	//Inn
	//1 000001 101 011 001
	0x83,0x51,0x00,0x00,
	//Shop Potion
	//1 000000 011 001 010
	0x80,0xCA,0x00,0x00,
	//Shop S-Potion
	//1 000000 100 001 010
	0x81,0x0A,0x01,0x00,
	//Shop X-Potion
	//1 000000 101 001 010
	0x81,0x4A,0x02,0x00,
	//Shop Ether
	//1 000000 110 001 010
	0x81,0x8A,0x03,0x00,
	//Shop S-Ether
	//1 000000 111 001 010
	0x81,0xCA,0x04,0x00,
	//Shop X-Ether
	//1 000001 000 001 010
	0x82,0x0A,0x05,0x00,
	//Shop Elixir
	//1 000001 001 001 010
	0x82,0x4A,0x06,0x00,
	//Shop X-Elixir
	//1 000001 010 001 010
	0x82,0x8A,0x07,0x00,
	//Large Chest #16 (ARMOR)
	//1 000001 110 110 011
	0x83,0xB3,0x10,0x81,
	//Inn Bookshelf #5
	//1 000001 100 001 100
	0x83,0x0C,0x09,0x00
};

MAP_EVENTS mapCastle4Events[] =
{
	4,
	//Teleport to Overworld (Left)
	//0 000000 011 111 000
	//0000 110010 010 011
	0x00,0xF8,0x0C,0x93,
	//Teleport to Overworld (Right)
	//0 000000 100 111 000
	//0000 110010 011 011
	0x01,0x38,0x0C,0x9B,
	//King
	//1 000000 011 010 100
	0x80,0xD4,0x04,0x80,
	//Large Chest #17 (AERO)
	//1 000000 100 010 011
	0x81,0x13,0x11,0x05
};

MAP_EVENTS mapTower4Events[] =
{
	23,
	//Teleport to Overworld
	//0 000010 111 111 000
	//0000 111010 011 010
	0x05,0xF8,0x0E,0x9A,
	//Stairs 1 (Up)
	//0 000010 011 011 000
	//1110 000110 011 011
	0x04,0xD8,0xE1,0x9B,
	//Stairs 1 (Down)
	//0 000110 011 011 000
	//1110 000010 011 011
	0x0C,0xD8,0xE0,0x9B,
	//Stairs 2 (Up)
	//0 000100 011 100 000
	//1110 001000 011 100
	0x08,0xE0,0xE2,0x1C,
	//Stairs 2 (Down)
	//0 001000 011 100 000
	//1110 000100 011 100
	0x10,0xE0,0xE1,0x1C,
	//Stairs 3 (Down)
	//0 001010 001 000 000
	//1110 000110 001 000
	0x14,0x40,0xE1,0x88,
	//Stairs 3 (Up)
	//0 000110 001 000 000
	//1110 001010 001 000
	0x0C,0x40,0xE2,0x88,
	//Stairs 4 (Down)
	//0 000100 000 111 000
	//1110 000000 000 111
	0x08,0x38,0xE0,0x07,
	//Stairs 4 (Up)
	//0 000000 000 111 000
	//1110 000100 000 111
	0x00,0x38,0xE1,0x07,
	//Stairs 5 (Up)
	//0 000001 111 110 000
	//1110 000101 111 110
	0x03,0xF0,0xE1,0x7E,
	//Stairs 5 (Down)
	//0 000101 111 110 000
	//1110 000001 111 110
	0x0B,0xF0,0xE0,0x7E,
	//Stairs 6 (Up)
	//0 000101 011 011 000
	//1110 001001 011 011
	0x0A,0xD8,0xE2,0x5B,
	//Stairs 6 (Down)
	//0 001001 011 011 000
	//1110 000101 011 011
	0x12,0xD8,0xE1,0x5B,
	//Passage (Down)
	//0 000101 100 111 000
	//1110 000111 100 001
	0x0B,0x38,0xE1,0xE1,
	//Passage (Up)
	//0 000111 100 001 000
	//1110 000101 100 111
	0x0F,0x08,0xE1,0x67,
	//Stairs 7 (Down)
	//0 000111 011 011 000
	//1110 000011 011 011
	0x0E,0xD8,0xE0,0xDB,
	//Stairs 7 (Up)
	//0 000011 011 011 000
	//1110 000111 011 011
	0x06,0xD8,0xE1,0xDB,
	//Stairs 8 (Up)
	//0 000110 110 111 000
	//1110 001010 110 111
	0x0D,0xB8,0xE2,0xB7,
	//Stairs 8 (Down)
	//0 001010 110 111 000
	//1110 000110 110 111 000
	0x15,0xB8,0xE1,0xB7,
	//Large Chest #18 (BOOTS)
	//1 000001 000 001 011
	0x82,0x0B,0x12,0x82,
	//Large Chest #19 (CHARM)
	//1 001011 011 100 011
	0x96,0xE3,0x13,0x83,
	//Large Chest #20 (DARK)
	//1 000011 101 010 011
	0x87,0x53,0x14,0x06,
	//Boss #4 (ID=3 Seal=8)
	//0 001000 110 010 101
	0x11,0x95,0x03,0x08
};

MAP_EVENTS mapTower5Events[] =
{
	23,
	//Teleport to Overworld
	//0 000010 111 111 000
	//0000 011000 010 100
	0x05,0xF8,0x06,0x14,
	//Stairs 1 (Up)
	//0 000010 011 011 000
	//1111 000110 011 011
	0x04,0xD8,0xF1,0x9B,
	//Stairs 1 (Down)
	//0 000110 011 011 000
	//1111 000010 011 011
	0x0C,0xD8,0xF0,0x9B,
	//Stairs 2 (Up)
	//0 000100 011 100 000
	//1111 001000 011 100
	0x08,0xE0,0xF2,0x1C,
	//Stairs 2 (Down)
	//0 001000 011 100 000
	//1111 000100 011 100
	0x10,0xE0,0xF1,0x1C,
	//Stairs 3 (Down)
	//0 001010 001 000 000
	//1111 000110 001 000
	0x14,0x40,0xF1,0x88,
	//Stairs 3 (Up)
	//0 000110 001 000 000
	//1111 001010 001 000
	0x0C,0x40,0xF2,0x88,
	//Stairs 4 (Down)
	//0 000100 000 111 000
	//1111 000000 000 111
	0x08,0x38,0xF0,0x07,
	//Stairs 4 (Up)
	//0 000000 000 111 000
	//1111 000100 000 111
	0x00,0x38,0xF1,0x07,
	//Stairs 5 (Up)
	//0 000001 111 110 000
	//1111 000101 111 110
	0x03,0xF0,0xF1,0x7E,
	//Stairs 5 (Down)
	//0 000101 111 110 000
	//1111 000001 111 110
	0x0B,0xF0,0xF0,0x7E,
	//Stairs 6 (Up)
	//0 000101 011 011 000
	//1111 001001 011 011
	0x0A,0xD8,0xF2,0x5B,
	//Stairs 6 (Down)
	//0 001001 011 011 000
	//1111 000101 011 011
	0x12,0xD8,0xF1,0x5B,
	//Passage (Down)
	//0 000101 100 111 000
	//1111 000111 100 001
	0x0B,0x38,0xF1,0xE1,
	//Passage (Up)
	//0 000111 100 001 000
	//1111 000101 100 111
	0x0F,0x08,0xF1,0x67,
	//Stairs 7 (Down)
	//0 000111 011 011 000
	//1111 000011 011 011
	0x0E,0xD8,0xF0,0xDB,
	//Stairs 7 (Up)
	//0 000011 011 011 000
	//1111 000111 011 011
	0x06,0xD8,0xF1,0xDB,
	//Stairs 8 (Up)
	//0 000110 110 111 000
	//1111 001010 110 111
	0x0D,0xB8,0xF2,0xB7,
	//Stairs 8 (Down)
	//0 001010 110 111 000
	//1111 000110 110 111 000
	0x15,0xB8,0xF1,0xB7,
	//Large Chest #21 (FIRE)
	//1 000001 000 001 011
	0x82,0x0B,0x15,0x02,
	//Large Chest #22 (HOLY)
	//1 001011 011 100 011
	0x96,0xE3,0x16,0x07,
	//Large Chest #23 (NUKE)
	//1 000011 101 010 011
	0x87,0x53,0x17,0x01,
	//Boss #5 (ID=4 Seal=0)
	//0 001000 110 010 101
	0x11,0x95,0x04,0x00
};

MAP_EVENTS_POINTER mapEvents[] =
{
	mapOverworldEvents,
	mapMainCastleEvents,
	mapTown1Events,
	mapCastle1Events,
	mapTower1Events,
	mapTown2Events,
	mapCastle2Events,
	mapTower2Events,
	mapTown3Events,
	mapCaveEvents,
	mapCastle3Events,
	mapTower3Events,
	mapTown4Events,
	mapCastle4Events,
	mapTower4Events,
	mapTower5Events
};

void loadChunkIDs()
{
	const uint8_t *subChunk;
	chunkIDs[1] = getNeighborChunk(pChunk, DIR_UP);
	chunkIDs[3] = getNeighborChunk(pChunk, DIR_LEFT);
	chunkIDs[4] = player.chunkID;
	chunkIDs[5] = getNeighborChunk(pChunk, DIR_RIGHT);
	chunkIDs[7] = getNeighborChunk(pChunk, DIR_DOWN);
	subChunk = getChunk(pMap, chunkIDs[1]);
	chunkIDs[0] = getNeighborChunk(subChunk, DIR_LEFT);
	chunkIDs[2] = getNeighborChunk(subChunk, DIR_RIGHT);
	subChunk = getChunk(pMap, chunkIDs[7]);
	chunkIDs[6] = getNeighborChunk(subChunk, DIR_LEFT);
	chunkIDs[8] = getNeighborChunk(subChunk, DIR_RIGHT);
	subChunk = getChunk(pMap, chunkIDs[3]);
	chunkIDs[0] &= getNeighborChunk(subChunk, DIR_UP);
	chunkIDs[6] &= getNeighborChunk(subChunk, DIR_DOWN);
	subChunk = getChunk(pMap, chunkIDs[5]);
	chunkIDs[2] &= getNeighborChunk(subChunk, DIR_UP);
	chunkIDs[8] &= getNeighborChunk(subChunk, DIR_DOWN);
}

void loadMap()
{
	pMap = (uint8_t*)pgm_read_word(maps + player.map);
	pMapEvents = (uint8_t*)pgm_read_word(mapEvents + player.map);
	tilesetID = getMapTileset(pMap);
	pChunk = getChunk(pMap, player.chunkID);
	loadChunkIDs();
}

#endif //MAPS_H
